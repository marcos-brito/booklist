package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"fmt"

	"github.com/marcos-brito/booklist/internal/auth"
	"github.com/marcos-brito/booklist/internal/conn"
	"github.com/marcos-brito/booklist/internal/models"
	"github.com/marcos-brito/booklist/internal/store"
	"gorm.io/gorm"
)

// AddedBy is the resolver for the addedBy field.
func (r *bookResolver) AddedBy(ctx context.Context, obj *models.Book) (*models.User, error) {
	panic(fmt.Errorf("not implemented: AddedBy - addedBy"))
}

// CreateBook is the resolver for the createBook field.
func (r *mutationResolver) CreateBook(ctx context.Context, input models.CreateBook) (*models.Book, error) {
	_, ident, ok := auth.GetSession(ctx)
	if !ok {
		return nil, ErrUnauthorized
	}

	_, err, badId := store.NewAuthorStore(conn.DB).FindManyById(input.Authors...)
	if err != nil {
		return nil, ErrWithOrInternal(err, gorm.ErrRecordNotFound, ErrBadId(*badId, "author"))
	}

	if input.Publisher != nil {
		_, err = store.NewPublisherStore(conn.DB).FindById(*input.Publisher)
		if err != nil {
			return nil, ErrWithOrInternal(err, gorm.ErrRecordNotFound, ErrBadId(*input.Publisher, "publisher"))
		}
	}

	book, err := store.NewBookStore(conn.DB).Create(&input, ident.UUID)
	if err != nil {
		return nil, ErrInternal
	}

	return book, nil
}

// Book returns BookResolver implementation.
func (r *Resolver) Book() BookResolver { return &bookResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type bookResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
