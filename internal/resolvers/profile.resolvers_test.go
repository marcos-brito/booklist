package resolvers_test

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"slices"
	"testing"

	"github.com/marcos-brito/booklist/internal/models"
	"github.com/marcos-brito/booklist/internal/resolvers"
	"github.com/stretchr/testify/assert"
)

func TestBook(t *testing.T) {
	resolver := &resolvers.Resolver{}
	ctx, _ := NewUser(t)
	book, err := resolver.Mutation().CreateBook(ctx, models.CreateBook{
		Title: "O homem de giz",
		Isbn:  "9788551002933",
	})

	assert.Nil(t, err)

	t.Run("should return the book related to the item", func(t *testing.T) {
		ctx, _ := NewUser(t)
		item := AddItemToUserCollection(t, ctx, book.ID)

		got, err := resolver.CollectionItem().Book(ctx, item)
		assert.Nil(t, err)
		assert.Equal(t, got.ID, book.ID)
	})
}

func TestCollection(t *testing.T) {
	resolver := &resolvers.Resolver{}
	ctx, _ := NewUser(t)
	inputs := []models.CreateBook{
		{
			Title: "O homem de giz",
			Isbn:  "9788551002933",
		},
		{
			Title: "Arquitetura limpa",
			Isbn:  "9788550804606",
		},
	}

	books := []*models.Book{}
	for _, input := range inputs {
		book, err := resolver.Mutation().CreateBook(ctx, input)
		assert.Nil(t, err)
		books = append(books, book)
	}

	t.Run("should return the user's collection", func(t *testing.T) {
		ctx, profile := NewUser(t)
		items := []*models.CollectionItem{}

		for _, book := range books {
			items = append(items, AddItemToUserCollection(t, ctx, book.ID))
		}

		got, err := resolver.Profile().Collection(ctx, profile)
		assert.Nil(t, err)
		for _, item := range got {
            assert.Equal(t, item.ProfileID, profile.ID)
			assert.True(t, slices.ContainsFunc(books, func(book *models.Book) bool {
				return book.ID == item.BookID
			}))
		}
	})
}
