package resolvers_test

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"fmt"
	"os"
	"slices"
	"testing"
	"time"

	"github.com/joho/godotenv"
	"github.com/marcos-brito/booklist/internal/auth"
	"github.com/marcos-brito/booklist/internal/models"
	"github.com/marcos-brito/booklist/internal/resolvers"
	"github.com/marcos-brito/booklist/internal/store"
	"github.com/stretchr/testify/assert"
	"github.com/testcontainers/testcontainers-go"
	"github.com/testcontainers/testcontainers-go/modules/postgres"
	"github.com/testcontainers/testcontainers-go/wait"
)

func TestMain(m *testing.M) {
	teardown := Setup()
	defer teardown()
	code := m.Run()
	os.Exit(code)
}

func Setup() func() {
	err := godotenv.Load("../../.env")
	if err != nil {
		panic(err)
	}

	container := StartPostgres()
	db, err := store.NewConnection()
	if err != nil {
		panic(err)
	}

	store.With(db)
	store.Migrate(db)

	return func() {
		if err := testcontainers.TerminateContainer(container); err != nil {
			panic(fmt.Sprintf("failed to terminate container: %s", err))
		}
	}
}

func StartPostgres() testcontainers.Container {
	ctx := context.Background()
	container, err := postgres.Run(ctx,
		"postgres:16-alpine",
		postgres.WithDatabase(os.Getenv("POSTGRES_DB")),
		postgres.WithUsername(os.Getenv("POSTGRES_USER")),
		postgres.WithPassword(os.Getenv("POSTGRES_PASSWORD")),
		testcontainers.WithWaitStrategy(
			wait.ForLog("database system is ready to accept connections").
				WithOccurrence(2).
				WithStartupTimeout(5*time.Second)),
	)

	if err != nil {
		panic(fmt.Sprintf("failed to start container: %s", err))
	}

	port, err := container.MappedPort(ctx, "5432")
	if err != nil {
		panic(err)
	}

	os.Setenv("POSTGRES_PORT", port.Port())

	return container
}

func TestCollection(t *testing.T) {
	resolver := &resolvers.Resolver{}
	ctx, _ := NewUser(t)
	inputs := []models.CreateBook{
		{
			Title: "O homem de giz",
			Isbn:  "9788551002933",
		},
		{
			Title: "Arquitetura limpa",
			Isbn:  "9788550804606",
		},
	}

	books := []*models.Book{}
	for _, input := range inputs {
		book, err := resolver.Mutation().CreateBook(ctx, input)
		assert.Nil(t, err)
		books = append(books, book)
	}

	t.Run("should return the user's collection", func(t *testing.T) {
		ctx, profile := NewUser(t)
		items := []*models.CollectionItem{}

		for _, book := range books {
			items = append(items, AddItemToUserCollection(t, ctx, book.ID))
		}

		got, err := resolver.Profile().Collection(ctx, profile)
		assert.Nil(t, err)
		for _, item := range got {
			assert.Equal(t, item.ProfileID, profile.ID)
			assert.True(t, slices.ContainsFunc(books, func(book *models.Book) bool {
				return book.ID == item.BookID
			}))
		}
	})
}

func TestMe(t *testing.T) {
	resolver := resolvers.Resolver{}

	t.Run("should crate profile when it does not exist", func(t *testing.T) {
		session := NewRandomSession()
		ctx := auth.AddSessionToContext(context.Background(), session)

		identity, err := auth.ParseIdentity(session.Identity.Traits)
		assert.Nil(t, err)

		got, err := resolver.Query().Me(ctx)
		assert.Nil(t, err)
		assert.Equal(t, got.UserUUID, session.Identity.Id)
		assert.Equal(t, got.Name, identity.Name)
		assert.Equal(t, got.Email, identity.Email)
		assert.True(t, got.Settings.Private)
	})

	t.Run("should return nil if there is no session", func(t *testing.T) {
		ctx := auth.AddSessionToContext(context.Background(), nil)
		got, err := resolver.Query().Me(ctx)

		assert.Nil(t, err)
		assert.Nil(t, got)
	})
}
