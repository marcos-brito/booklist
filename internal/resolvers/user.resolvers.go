package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"

	"github.com/google/uuid"
	"github.com/marcos-brito/booklist/internal/auth"
	"github.com/marcos-brito/booklist/internal/models"
	"github.com/marcos-brito/booklist/internal/store"
	"gorm.io/gorm"
)

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, uuid uuid.UUID) (*models.User, error) {
	userStore := store.NewUserStore(store.DB)
	settings, err := userStore.FindSettingsByUserUuid(uuid)
	if err != nil {
		return nil, ErrWithOrInternal(gorm.ErrRecordNotFound, err, ErrBadUuid(uuid, "user"))
	}

	if settings.Private {
		return nil, ErrBadUuid(uuid, "user")
	}

	user := &models.User{
		UUID: uuid,
	}

	return user, nil
}

// Name is the resolver for the name field.
func (r *userResolver) Name(ctx context.Context, obj *models.User) (*string, error) {
	settings, err := store.NewUserStore(store.DB).FindSettingsByUserUuid(obj.UUID)
	if err != nil {
		return nil, ErrInternal
	}

	if !settings.ShowName {
		return nil, nil
	}

	// TODO: use an actual client
	ident, ok := auth.FindIdentity(obj.UUID, nil)
	if !ok {
		return nil, ErrInternal
	}

	return &ident.Traits.Name, nil
}

// Lists is the resolver for the lists field.
func (r *userResolver) Lists(ctx context.Context, obj *models.User) ([]*models.List, error) {
	lists, err := store.NewUserStore(store.DB).FindPublicLists(obj.UUID)
	if err != nil {
		return nil, ErrInternal
	}

	return lists, nil
}

// Collection is the resolver for the collection field.
func (r *userResolver) Collection(ctx context.Context, obj *models.User) ([]*models.CollectionItem, error) {
	userStore := store.NewUserStore(store.DB)
	settings, err := userStore.FindSettingsByUserUuid(obj.UUID)
	if err != nil {
		return nil, ErrInternal
	}

	if !settings.ShowCollection {
		return nil, nil
	}

	collection, err := userStore.FindItems(obj.UUID)
	if err != nil {
		return nil, ErrInternal
	}

	return collection, nil
}

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type userResolver struct{ *Resolver }
